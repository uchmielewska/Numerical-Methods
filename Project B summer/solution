close all
clear
clc
format long;
%===========================TASK 1===========================
f=@(x)log(x) + x +sin(x.^2/100)-27/4;

%exact solution
xexact=fzero(f,6)

figure(10);
fplot(f,[0,10]);
hold on;
scatter(xexact,0,'*');
xlabel('x');
ylabel('y');
title('f(x)');
hold off;

%===========================TASK 2===========================
%======================bisection method======================
for i=1:14
    
    a=10^(-6);                  %lower number
    b=10;                       %upper number
    criterion2=(b-a)/2;
    delta=10^(-3)/10^(i-1);
    counter=0;
     
    while (criterion2>delta && counter<100)
        xsolution=(b+a)/2;
        if f(xsolution)<0
            a=xsolution;
        else
            b=xsolution;
        end
        criterion2=(b-a)/2;
        counter=counter+1;
    end          
    deltax=abs(xsolution-xexact);
    
    if (criterion2 ==0)
        criterion2=eps;
    end   
    if (deltax == 0)
        deltax=eps;
    end
    
    alldeltax(i)=deltax;
    allcounter(i)=counter;
    alldelta(i)=delta;
    allcriterion2(i)=criterion2;
    allxsolution(i)=xsolution;
end

figure(1);
semilogx(alldelta, allcounter,'-x');
title('I(\Delta)');
ylabel('I');
xlabel('\Delta');
hold on;

figure(2);
loglog(alldelta, alldeltax,'-o');
title('Bisection method');
xlabel('\Delta');
hold on;
loglog(alldelta, allcriterion2,'-s');
legend('\Delta x','criterion', 'Location', 'Northwest');
ylim([10^(-16) 10^(-2)]);
xlim([10^(-16) 10^(0)]);
hold off;

%===========================TASK 3===========================
%=====================Regula-falsi method=====================
for i=1:14
    
    x0=4;                           %constant point
    x1=10;                          %starting point              
    
    
    criterion3=abs(x1-x0);
    delta=10^(-3)/10^(i-1);
    f0=f(x0);                       %constant
    counter=0;
     
    while (criterion3>delta && counter<100) 
        f1=f(x1);                   %changes in each iteration
        xprev=x1;
        x1=x1-((x1-x0)/(f1-f0))*f1; %regula-falsi formula        
        criterion3=abs(x1-xprev);
        counter=counter+1;
    end       
    deltax=abs(x1-xexact);  
    
    if (criterion3 ==0)
        criterion3=eps;
    end   
    if (deltax == 0)
        deltax=eps;
    end
    
    alldeltax(i)=deltax;    
    allcounter(i)=counter;     
    allcriterion3(i)=criterion3;    
    allxsolution(i)=x1; 
end

figure(1);
semilogx(alldelta, allcounter,'-d');

figure(3);
loglog(alldelta, alldeltax,'-o');
title('Regula-falsi method');
xlabel('\Delta');
hold on;
loglog(alldelta, allcriterion3,'-s');
legend('\Delta x','criterion', 'Location', 'Northwest');
ylim([10^(-16) 10^(-2)]);
xlim([10^(-16) 10^(0)]);
hold off;

%===========================TASK 4===========================
%========================secant method=======================
for i=1:14
    
     x0=4;                           %lower starting point
     x1=10;                           %upper starting point

    criterion4=abs(x1-x0);
    delta=10^(-3)/10^(i-1); 
    counter=0;
    f0=f(x0);
    f1=f(x1);
     
    while (criterion4>delta && counter<100) 
        x=x1-((x1-x0)*f1/(f1-f0));      %secant formula
        fx=f(x);                        %function value at new approximate solution
        x0=x1;
        f0=f1;
        x1=x;
        f1=fx;
        criterion4=abs(x1-x0);
        counter=counter+1;
    end        
    deltax=abs(x1-xexact);  
    
    if (criterion4 ==0)
        criterion4=eps;
    end
        
    if (deltax == 0)
        deltax=eps;
    end
    
    alldeltax(i)=deltax;    
    allcounter(i)=counter;       
    allcriterion4(i)=criterion4;    
    allxsolution(i)=x1; 
end

figure(1);
semilogx(alldelta, allcounter,'-*');

figure(4);
loglog(alldelta, alldeltax,'-o');
title('Secant method');
xlabel('\Delta');
hold on;
loglog(alldelta, allcriterion4,'-s');
legend('\Delta x','criterion', 'Location', 'Northwest');
ylim([10^(-16) 10^(-2)]);
xlim([10^(-16) 10^(0)]);
hold off;

%===========================TASK 5===========================
%========================Newton's method=====================
for i=1:14
    
    df=@(x) (1./50).*x.*cos(x.^2./100)+(1./x)+1;
    x0=10;                           %starting point

    %first calculation
    x1=x0-f(x0)/df(x0);             %newton's formula 
    criterion5=abs(x1-x0);    
    delta=10^(-3)/10^(i-1); 
    counter=0;
    f0=f(x0);
    f1=f(x1);
     
    while (criterion5>delta && counter<100) 
        x=x1-f(x1)/df(x1);      %newton's formula
        x0=x1;
        x1=x;        
        criterion5=abs(x1-x0);
        counter=counter+1;
    end    
    deltax=abs(x1-xexact);  
    
    if (criterion5 ==0)
        criterion5=eps;
    end
        
    if (deltax == 0)
        deltax=eps;
    end
    
    alldeltax(i)=deltax;    
    allcounter(i)=counter;  
    allcriterion5(i)=criterion5;    
    allxsolution(i)=x1; 
end

figure(1);
semilogx(alldelta, allcounter, '-o');
legend('Bisection','Regula-falsi', 'Secant', 'Newton');
hold off;

figure(5);
loglog(alldelta, alldeltax,'-o');
title('Newton method');
xlabel('\Delta');
hold on;
loglog(alldelta, allcriterion5,'-s'); 
legend('\Delta x','criterion', 'Location', 'Northwest');
ylim([10^(-16) 10^(-2)]);
xlim([10^(-16) 10^(0)]);
hold off;
